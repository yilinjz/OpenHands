```patch
--- a/src/_pytest/mark/evaluate.py
+++ b/src/_pytest/mark/evaluate.py
@@ -1,5 +1,6 @@
 import os
 import platform
+import _pytest._code
 import sys
 import traceback
 from typing import Any
@@ -13,26 +14,6 @@
 from _pytest.config import Config
 from _pytest.nodes import Item
 from _pytest.store import StoreKey
-
-
-evalcache_key = StoreKey[Dict[str, Any]]()
-
-
-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:
-    default = {}  # type: Dict[str, object]
-    evalcache = config._store.setdefault(evalcache_key, default)
-    try:
-        return evalcache[expr]
-    except KeyError:
-        import _pytest._code
-
-        exprcode = _pytest._code.compile(expr, mode="eval")
-        evalcache[expr] = x = eval(exprcode, d)
-        return x
-
-
-# Note: This class is copied by pytest-subtesthack. Refactor with care.
 
 
 class MarkEvaluator:
@@ -100,7 +81,8 @@
             try:
                 d = {"os": os, "sys": sys, "platform": platform, "config": config}
                 d.update(globals_)
-                result = cached_eval(config, condition, d)
+                expr_code = _pytest._code.compile(condition, mode="eval")
+                result = eval(expr_code, d)
             except TEST_OUTCOME:
                 # e.g. skip("reason")
                 raise
```
