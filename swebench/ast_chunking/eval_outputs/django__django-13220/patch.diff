```diff
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -63,3 +63,43 @@
         else:
             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)
         return error_dict
+
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+
+        def _get_error_sort_key(error):
+            """
+            Generate a sort key for a ValidationError. Used to compare lists
+            of errors independent of their order. Make sure the key is stable
+            and handles different types for params.
+            """
+            params_repr = tuple(sorted(error.params.items())) if isinstance(error.params, dict) else error.params
+            return (str(error.message), error.code, params_repr)
+
+        def _compare_error_lists(list1, list2):
+            """Compare two lists of ValidationErrors independent of order."""
+            if len(list1) != len(list2):
+                return False
+            try:
+                sorted_list1 = sorted(list1, key=_get_error_sort_key)
+                sorted_list2 = sorted(list2, key=_get_error_sort_key)
+            except TypeError:
+                # If params contains unorderable types, sorting fails.
+                # Consider these ValidationErrors unequal.
+                return False
+
+            for e1, e2 in zip(sorted_list1, sorted_list2):
+                if not (e1.message == e2.message and e1.code == e2.code and e1.params == e2.params):
+                    return False
+            return True
+
+        self_is_dict = hasattr(self, 'error_dict')
+        other_is_dict = hasattr(other, 'error_dict')
+
+        if self_is_dict != other_is_dict:
+            return False
+
+        if self_is_dict:  # Both have error_dict
+            if set(self.error_dict.keys()) != set(other.error_dict.keys()):
+                return False
+            return all(_compare_error_lists(self.error_dict[k], other.error_dict[k]) for k in self.error_dict)
+        else:  # Both have error_list
+            return _compare_error_lists(self.error_list, other.error_list)

```
