```diff
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -3,7 +3,7 @@
 from sympy.core.compatibility import ordered
 from sympy.core.containers import Tuple
 from sympy.core.expr import Expr
-from sympy.core.function import Function, Derivative
+from sympy.core.function import Function, Derivative, AppliedUndef
 from sympy.core.mul import Mul
 from sympy.core.power import Pow
 from sympy.core.singleton import S
@@ -40,11 +40,15 @@
                  dim /= idim**count
              return factor, dim
          elif isinstance(expr, Function):
+             # By default, functions requires dimensionless arguments
+             # and returns dimensionless results.
+             # TODO: Add exceptions for functions that operate on units.
              fds = [self._collect_factor_and_dimension(
                  arg) for arg in expr.args]
-             return (expr.func(*(f[0] for f in fds)),
-                     *(d[1] for d in fds))
+             for i, (factor, dim) in enumerate(fds):
+                 if not self.get_dimension_system().is_dimensionless(dim):
+                     raise ValueError(
+                         'Dimension of "{}" is {}, '
+                         'but it should be dimensionless'.format(
+                             expr.args[i], dim))
+             return expr.func(*(f[0] for f in fds)), Dimension(1)
          elif isinstance(expr, Dimension):
              return S.One, expr
          else:

```
