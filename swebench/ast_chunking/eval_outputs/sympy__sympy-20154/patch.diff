```diff
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -41,20 +41,13 @@
     {1: 1, 5: 1}
     {2: 1, 4: 1}
     {3: 2}
-
-    Note that the _same_ dictionary object is returned each time.
-    This is for speed:  generating each partition goes quickly,
-    taking constant time, independent of n.
-
-    >>> [p for p in partitions(6, k=2)]
-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-    If you want to build a list of the returned dictionaries then
-    make a copy of them:
-
-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
+
+    >>> [p for p in partitions(6, k=2)] # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
-    [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
+
+    Using ``size=True`` provides the number of parts (M) along with the
+    partition (P):
+
+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)] # doctest: +SKIP
+    [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
 
     References
     ==========
@@ -118,9 +111,9 @@
                 p[1] = n
                 M = n
                 if size:
-                    yield M, p
+                    yield M, p.copy()
                 else:
-                    yield p
+                    yield p.copy()
                 del p[1]
             return
 
@@ -140,9 +133,9 @@
             if M <= m:  # Check maximum number of parts constraint
                 if n_rem == 0:
                     if size:
-                        yield M, p
+                        yield M, p.copy()
                     else:
-                        yield p
+                        yield p.copy()
                 else:
                     yield from _partitions(n_rem, min(k, n_rem))
 

```
