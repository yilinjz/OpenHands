```patch
--- a/sklearn/neighbors/approximate.py
+++ b/sklearn/neighbors/approximate.py
@@ -1,3 +1,6 @@
+import numbers
+
+import numpy as np
 from ..base import BaseEstimator, NeighborsBase
 from ..utils import check_array
 from ..utils.validation import check_is_fitted
@@ -29,6 +32,11 @@
 
         if n_neighbors is None:
             n_neighbors = self.n_neighbors
+        elif not isinstance(n_neighbors, numbers.Integral):
+            raise TypeError("n_neighbors does not take %s value, enter integer value"
+                            % type(n_neighbors))
+        elif n_neighbors <= 0:
+            raise ValueError("Expected n_neighbors > 0. Got %d" % n_neighbors)
 
         X = check_array(X, accept_sparse='csr')
 
--- a/sklearn/neighbors/base.py
+++ b/sklearn/neighbors/base.py
@@ -1,10 +1,13 @@
 """Base classes for nearest neighbors."""
 # Authors: Jake Vanderplas <vanderplas@astro.washington.edu>
 #          Fabian Pedregosa <fabian.pedregosa@inria.fr>
-#          Alexandre Gramfort <alexandre.gramfort@inria.fr>
+#          Alexandre Gramfort <alexandre.gramfort@inria.fr>s
 #          Sparseness support by Lars Buitinck
 #          Multi-output support by Arnaud Joly <a.joly@ulg.ac.be>
 # License: BSD 3 clause (C) INRIA, University of Amsterdam
+import numbers
+from abc import ABCMeta, abstractmethod
+
 import numpy as np
 from scipy.sparse import issparse
 
@@ -14,8 +17,6 @@
 from ..utils.validation import check_is_fitted
 from ..utils.multiclass import check_classification_targets
 from ..utils import gen_even_slices, get_chunk_n_rows
-from abc import ABCMeta, abstractmethod
-import six
 
 from .ball_tree import BallTree
 from .kd_tree import KDTree
@@ -56,6 +57,12 @@
         if n_neighbors is None:
             n_neighbors = self.n_neighbors
 
+        if not isinstance(n_neighbors, numbers.Integral):
+            raise TypeError("n_neighbors does not take %s value, enter integer value"
+                            % type(n_neighbors))
+        elif n_neighbors <= 0:
+            raise ValueError("Expected n_neighbors > 0. Got %d" % n_neighbors)
+
         if X is not None:
             query_is_train = False
             X = check_array(X, accept_sparse='csr')
@@ -81,7 +88,7 @@
         n_jobs = _get_n_jobs(self.n_jobs)
 
 
-class RadiusNeighborsMixin(object):
+class RadiusNeighborsMixin:
     """Mixin for radius-based neighbors searches"""
 
     def radius_neighbors(self, X=None, radius=None, return_distance=True):
@@ -158,7 +165,7 @@
         return result
 
 
-class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):
+class NeighborsBase(BaseEstimator, metaclass=ABCMeta):
     """Base class for nearest neighbors estimators."""
 
     @abstractmethod
@@ -167,6 +174,12 @@
                  p=2, metric_params=None, n_jobs=1):
 
         self.n_neighbors = n_neighbors
+        if (self.n_neighbors is not None and
+                not isinstance(self.n_neighbors, numbers.Integral)):
+            raise TypeError("n_neighbors does not take %s value, enter integer value"
+                            % type(self.n_neighbors))
+        if self.n_neighbors is not None and self.n_neighbors <= 0:
+            raise ValueError("Expected n_neighbors > 0. Got %d" % n_neighbors)
         self.radius = radius
         self.algorithm = algorithm
         self.leaf_size = leaf_size
```
