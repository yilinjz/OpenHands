```patch
--- a/django/utils/http.py
+++ b/django/utils/http.py
@@ -1,6 +1,7 @@
 import base64
 import calendar
 import datetime
+import time
 import re
 import unicodedata
 import warnings
@@ -20,19 +21,25 @@
 18     try:
 19         year = int(m.group('year'))
 20         if year < 100:
-21             if year < 70:
-22                 year += 2000
-23             else:
-24                 year += 1900
-25         month = MONTHS.index(m.group('mon').lower()) + 1
-26         day = int(m.group('day'))
-27         hour = int(m.group('hour'))
-28         min = int(m.group('min'))
-29         sec = int(m.group('sec'))
-30         result = datetime.datetime(year, month, day, hour, min, sec)
-31         return calendar.timegm(result.utctimetuple())
-32     except Exception as exc:
-33         raise ValueError("%r is not a valid date" % date) from exc
+            # RFC 7231 ยง 7.1.1.1: A recipient that parses a timestamp value with
+            # a two-digit year MUST interpret YY as representing the year
+            # 1900 + YY if YY is greater than or equal to 70, and 2000 + YY
+            # otherwise.
+            # RFC 7231 ยง 7.1.1.1: Recipients of a timestamp value in rfc850-date
+            # format, which uses a two-digit year, MUST interpret a timestamp
+            # that appears to be more than 50 years in the future as
+            # representing the most recent year in the past that had the same
+            # last two digits.
+            current_year = time.gmtime().tm_year
+            # Assume 20xx first
+            assumed_year = 2000 + year
+            if assumed_year - current_year > 50:
+                # If that's more than 50 years in the future, interpret as 19xx
+                year += 1900
+            else:
+                year = assumed_year
+        month = MONTHS.index(m.group('mon').lower()) + 1
+        day = int(m.group('day'))
+        hour = int(m.group('hour'))
+        min = int(m.group('min'))
+        sec = int(m.group('sec'))
+        result = datetime.datetime(year, month, day, hour, min, sec)
+        return calendar.timegm(result.utctimetuple())
+    except Exception as exc:
+        raise ValueError("%r is not a valid date" % date) from exc
 34 
 35 
 36 def parse_http_date_safe(date):
```
