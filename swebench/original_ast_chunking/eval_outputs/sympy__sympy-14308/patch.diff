```patch
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -28,9 +28,8 @@
                 #For a general expr
                 else:
                     #We always wrap the measure numbers in
-                    #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
+                    #parentheses - NO, this breaks multi-line expressions like Pow.
+                    arg_str = str(self._print(v)) # Get the string representation

                     o1.append(arg_str + ' ' + k._pretty_form)
                 vectstrs.append(k._pretty_form)
@@ -44,14 +43,10 @@
         #Fixing the newlines
         lengths = []
         strs = ['']
-        for i, partstr in enumerate(o1):
-            # XXX: What is this hack?
-            if '\n' in partstr:
-                tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
-                o1[i] = tempstr
+        # The hack below assumed parens() was used and tried to fix placement
+        # of the vector string. Removing it as parens() is removed.
+        # The alignment code below should handle multi-line scalar strings.
+        # for i, partstr in enumerate(o1):
+        #    ... (hack removed) ...
+
         o1 = [x.split('\n') for x in o1]
         n_newlines = max([len(x) for x in o1])
         for parts in o1:
@@ -74,4 +69,8 @@
                                             3*(len(lengths)-1)))
                     strs[j] += ' '*(lengths[-1]+3)

-        return prettyForm(u'\n'.join([s[:-3] for s in strs]))
+        # Combine lines, remove trailing ' + ', and set baseline to vertical center
+        # The rstrip() removes the trailing ' + ' added in the loop.
+        final_str = u'\n'.join([s.rstrip() for s in strs])
+        final_form = prettyForm(final_str)
+        final_form.baseline = final_form.height() // 2
+        return final_form
```
