```patch
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -1,5 +1,6 @@
 import functools
 import re
+import sys
 import types
 from pathlib import Path
 
@@ -11,6 +12,7 @@
 from django.template import Context, Engine, TemplateDoesNotExist
 from django.template.defaultfilters import pprint
 from django.urls import Resolver404, get_resolver, resolve
+from django.urls.exceptions import Resolver404
 from django.utils.datastructures import MultiValueDict
 from django.utils.encoding import force_str
 from django.utils.module_loading import import_string
@@ -25,31 +27,38 @@
 
 def technical_404_response(request, exception):
     """Create a technical 404 error response. `exception` is the Http404."""
+    tried = []
+    resolver_404_args = None
+    show_urlconf_info = False  # Default to not showing pattern list
+
+    # Check if it's a Resolver404 with the expected structure ('tried' key).
+    # This indicates that URL resolution failed because no pattern matched.
+    if isinstance(exception, Resolver404) and exception.args and isinstance(exception.args[0], dict):
+        resolver_404_args = exception.args[0]
+        tried = resolver_404_args.get('tried', [])
+        # If 'tried' has content, it's a standard "no match" Resolver404.
+        if tried:
+            show_urlconf_info = True
+
+    # Handle the special case for the default URLconf welcome page.
+    # This check should only happen if show_urlconf_info is currently True.
+    if show_urlconf_info and (
+            request.path == '/' and
+            len(tried) == 1 and
+            len(tried[0]) == 1 and
+            getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'
+    ):
+        return default_urlconf(request)
+
+    # Determine the error URL.
     try:
-        error_url = exception.args[0]['path']
+        # If it's a Resolver404, get the path from its arguments.
+        error_url = resolver_404_args['path']
     except (IndexError, TypeError, KeyError, AttributeError):
+        # Otherwise, use the requested path.
         error_url = request.path_info[1:]  # Trim leading slash
 
-    try:
-        tried = exception.args[0]['tried']
-    except (IndexError, TypeError, KeyError):
-        tried = []
-    else:
-        if (not tried or (                  # empty URLconf
-            request.path == '/' and
-            len(tried) == 1 and             # default URLconf
-            len(tried[0]) == 1 and
-            getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'
-        )):
-            return default_urlconf(request)
-
     urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)
     if isinstance(urlconf, types.ModuleType):
         urlconf = urlconf.__name__
 
     caller = ''
-    try:
-        resolver_match = resolve(request.path)
-    except Resolver404:
-        pass
-    else:
-        obj = resolver_match.func
-
-        if hasattr(obj, '__name__'):
-            caller = obj.__name__
-        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):
-            caller = obj.__class__.__name__
-
-        if hasattr(obj, '__module__'):
-            module = obj.__module__
-            caller = '%s.%s' % (module, caller)
+    # If the exception is a standard Resolver404 (show_urlconf_info is True),
+    # try to resolve the path again to find the view name that would have been
+    # called if the URL pattern matched. This is useful for debugging.
+    # If the Http404 was raised during resolution (e.g., by a converter) or
+    # by the view itself, resolving again might fail or be misleading, so skip it.
+    if show_urlconf_info:
+        try:
+            resolver_match = resolve(request.path_info)
+        except Http404:
+            # This can happen if the 404 was raised after resolution (e.g., in the view).
+            # We might not be able to determine the caller in this case.
+            pass
+        else:
+            obj = resolver_match.func
+            if hasattr(obj, '__name__'):
+                caller = obj.__name__
+            elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):
+                caller = obj.__class__.__name__
+            if hasattr(obj, '__module__'):
+                module = obj.__module__
+                caller = '%s.%s' % (module, caller)
 
     with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:
         t = DEBUG_ENGINE.from_string(fh.read())
@@ -57,11 +66,12 @@
         'urlconf': urlconf,
         'root_urlconf': settings.ROOT_URLCONF,
         'request_path': error_url,
-        'urlpatterns': tried,
+        'urlpatterns': tried if show_urlconf_info else None,
         'reason': str(exception),
         'request': request,
         'settings': get_safe_settings(),
         'raising_view_name': caller,
+        'show_urlconf_info': show_urlconf_info,
     })
     return HttpResponseNotFound(t.render(c), content_type='text/html')
 
--- a/django/views/templates/technical_404.html
+++ b/django/views/templates/technical_404.html
@@ -25,16 +25,16 @@
     <p>
       Request Method: {{ request.META.REQUEST_METHOD }}<br>
       Request URL: {{ request.get_raw_uri }}<br>
-      {% if raising_view_name %}
+      {% if raising_view_name and show_urlconf_info %} {# Only show if we resolved successfully #}
         Raised by: {{ raising_view_name }}
       {% endif %}
     </p>
-    <p>
+    <p id="explanation">
       {{ reason|escape }}
     </p>

-    {% if urlpatterns %}
-      <p>
+    {% if show_urlconf_info and urlpatterns %} {# Check flag and urlpatterns #}
+      <p id="urlconf-info">
         Using the URLconf defined in <code>{{ urlconf }}</code>,
         Django tried these URL patterns, in this order:
       </p>
@@ -55,6 +55,12 @@
           The current path, <code>{{ request_path }}</code>, didn't match any of these.
         {% endif %}
       </p>
+    {% elif not show_urlconf_info %} {# Add this block for converter/view 404s #}
+      <p id="no-urlconf-info">
+        The view associated with <code>{{ request_path }}</code> (matched by the URLconf
+        <code>{{ urlconf }}</code>) raised an Http404 exception:
+      </p>
+      <blockquote>{{ reason|escape }}</blockquote>
     {% endif %}

     <h2>Upload error handlers</h2>
```
