```patch
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -1,7 +1,7 @@
 from django.apps.registry import Apps
-from django.db import models
+from django.db import connections, models, router
 from django.db.utils import DatabaseError
-from django.utils.functional import classproperty
+from django.utils.functional import classproperty # Keep this if needed elsewhere
 from django.utils.timezone import now
 
 from .exceptions import MigrationSchemaMissing
@@ -50,6 +50,9 @@
 
     def ensure_schema(self):
         """Ensure the table exists and has the correct schema."""
+        # Check if migrations are allowed on this database.
+        if not router.allow_migrate_model(self.connection.alias, self.Migration):
+            return
         # If the table's there, that's fine - we've never changed its schema
         # in the codebase.
         if self.has_table():
@@ -67,6 +70,9 @@
         Return a dict mapping (app_name, migration_name) to Migration instances
         for all applied migrations.
         """
+        # Check if migrations are allowed on this database.
+        if not router.allow_migrate_model(self.connection.alias, self.Migration):
+            return {}
         if self.has_table():
             return {(migration.app, migration.name): migration for migration in self.migration_qs}
         else:
@@ -76,11 +82,17 @@
 
     def record_applied(self, app, name):
         """Record a migration as having been applied."""
+        # Check if migrations are allowed on this database.
+        if not router.allow_migrate_model(self.connection.alias, self.Migration):
+            return
         self.ensure_schema()
         self.migration_qs.get_or_create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record a migration as having been unapplied."""
+        # Check if migrations are allowed on this database.
+        if not router.allow_migrate_model(self.connection.alias, self.Migration):
+            return
         self.migration_qs.filter(app=app, name=name).delete()

```
