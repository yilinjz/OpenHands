```patch
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -14,6 +14,7 @@
 """
 from sympy.core import Add, Mul, Pow, S, Symbol, I, sympify
 from sympy.core.function import count_ops
+from sympy.core.expr import Expr
 from sympy.functions import (cos, cot, csc, exp, log, sec, sin, tan, sqrt,
                              cosh, coth, csch, sech, sinh, tanh)
 from sympy.functions.elementary.trigonometric import TrigonometricFunction
@@ -140,7 +141,10 @@
 #     Geometrically prime means that it generates a prime ideal in
 #     CC[gens], not just ZZ[gens].
 
-def trigsimp(expr, **opts):
+# We need the definition of _trigs for _trigsimp
+_trigs = {sin, cos, tan, cot, sec, csc}
+
+def trigsimp(expr, **opts): # This is the main function to modify
     """
     Reduces expression by using known trigonometric identities.
 
@@ -183,6 +187,11 @@
     >>> from sympy import exp, I
     >>> trigsimp(exp(I*x) - exp(-I*x))
     2*I*sin(x)
+    >>> f = 1 / 2 * (-I*exp(I*x) + I*exp(-I*x))
+    >>> trigsimp(f)
+    sin(x)
+    >>> trigsimp(f / x) # Test corollary - might give sin(x)/x
+    sin(x)/x
 
     Notes
     =====
@@ -203,10 +212,26 @@
     simplify, powsimp, hypersimp, combsimp, ratsimp
 
     """
-    # TODO: recursive option?
-
     from sympy.simplify.simplify import bottom_up, FU, cancel, S, _is_sum_surds
+    from sympy.core.relational import Relational
+    from sympy.functions.elementary.exponential import exp # Ensure exp is available
+    # count_ops is imported globally or within exptrigsimp
 
+    expr_original = expr # Keep original for fallback
+
+    # Handle Relational, Add, Mul, Pow etc. by mapping trigsimp
+    if isinstance(expr, Relational):
+        return type(expr)(trigsimp(expr.lhs, **opts),
+                          trigsimp(expr.rhs, **opts))
+
+    if not isinstance(expr, Expr):
+        return expr
+
+    # --- Try exptrigsimp first ---
+    # This helps convert expressions like exp(I*x) into sin(x)/cos(x) forms
+    # before applying other trigonometric rules.
+    try:
+        expr_after_exptrig = exptrigsimp(expr)
+        # Use count_ops from sympy.core.function
+        if count_ops(expr_after_exptrig, visual=False) < count_ops(expr, visual=False):
+            expr = expr_after_exptrig
+    except Exception:
+        # If exptrigsimp fails, proceed with the original expression
+        # Consider logging this failure if a logging mechanism exists.
+        expr = expr_original # Revert to original
+    # ---------------------------
 
     # check for easy simplifications
     if not expr.has(TrigonometricFunction, HyperbolicFunction, exp):
```
