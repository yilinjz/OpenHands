```patch
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3165,9 +3165,7 @@
                                    emit=False, auto=auto)
         """
         ret = self.xaxis._set_lim(left, right, emit=emit, auto=auto)
-        if emit:
-            self.callbacks.process('xlim_changed', self)
-            # Call all of the other x-axes that are shared with this one
+        if emit:  # Trigger propagation if emit is True for this call.
             for other in self._shared_x_axes.get_siblings(self):
                 if other is not self:
                     other.set_xlim(self.viewLim.intervalx,
@@ -3175,6 +3173,11 @@
                     if self.figure.canvas is not None:
                         self.figure.canvas.draw_idle()
+
+        # Always trigger callbacks if limits were changed, even if emit=False
+        # (e.g. change triggered by a shared axis). The `if emit:` above
+        # prevents recursive propagation.
+        self.callbacks.process('xlim_changed', self)
         return ret
 
     get_xscale = _axis_method_wrapper("xaxis", "get_scale")
@@ -3265,9 +3268,7 @@
                                    emit=False, auto=auto)
         """
         ret = self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
-        if emit:
-            self.callbacks.process('ylim_changed', self)
-            # Call all of the other y-axes that are shared with this one
+        if emit:  # Trigger propagation if emit is True for this call.
             for other in self._shared_y_axes.get_siblings(self):
                 if other is not self:
                     other.set_ylim(self.viewLim.intervaly,
@@ -3275,6 +3276,11 @@
                     if self.figure.canvas is not None:
                         self.figure.canvas.draw_idle()
+
+        # Always trigger callbacks if limits were changed, even if emit=False
+        # (e.g. change triggered by a shared axis). The `if emit:` above
+        # prevents recursive propagation.
+        self.callbacks.process('ylim_changed', self)
         return ret
 
     get_yscale = _axis_method_wrapper("yaxis", "get_scale")
```
