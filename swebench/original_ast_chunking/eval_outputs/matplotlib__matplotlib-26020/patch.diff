```patch
--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py
+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py
@@ -1,5 +1,7 @@
 import numpy as np
 
+import matplotlib.axes
+from matplotlib import _api
 from matplotlib.axes import Axes
 import matplotlib.artist as martist
 from matplotlib.offsetbox import VPacker, HPacker, PackerBase
@@ -22,11 +24,27 @@
 def _tick_only(ax, bottom_on, left_on):
     # Turns off ticks and labels (but not spines); used for AxesGrid.
     bottom_off = not bottom_on
-    left_off = not left_on
-    ax.axis["bottom"].toggle(ticklabels=bottom_off, label=bottom_off)
-    ax.axis["top"].toggle(all=True)
-    ax.axis["left"].toggle(ticklabels=left_off, label=left_off)
-    ax.axis["right"].toggle(all=True)
+    left_off = not left_on
+
+    try:
+        # Try the default AxesGrid/AxisArtist way, which assumes ax.axis is
+        # subscriptable and returns objects with a .toggle() method.
+        ax.axis["bottom"].toggle(ticklabels=bottom_off, label=bottom_off)
+        ax.axis["top"].toggle(all=True)
+        ax.axis["left"].toggle(ticklabels=left_off, label=left_off)
+        ax.axis["right"].toggle(all=True)
+    except (TypeError, AttributeError):
+        # TypeError: 'method' object is not subscriptable (if ax.axis is method)
+        # AttributeError: if ax.axis["bottom"] exists but has no .toggle()
+        # Fallback for standard Matplotlib Axes (and subclasses like GeoAxes)
+        if isinstance(ax, matplotlib.axes.Axes):
+            ax.xaxis.set_tick_params(which='both', bottom=bottom_on,
+                                     labelbottom=bottom_on)
+            ax.xaxis.label.set_visible(bottom_on)
+            ax.xaxis.set_tick_params(which='both', top=False, labeltop=False)
+            ax.yaxis.set_tick_params(which='both', left=left_on, labelleft=left_on)
+            ax.yaxis.label.set_visible(left_on)
+            ax.yaxis.set_tick_params(which='both', right=False, labelright=False)
+        else:
+            # Warn if the axes type is unexpected and cannot be handled.
+            _api.warn_external(f"Axes class {type(ax)} may not be compatible "
+                               f"with AxesGrid label_mode.")
 
 
 class CbarAxesBase:
```
