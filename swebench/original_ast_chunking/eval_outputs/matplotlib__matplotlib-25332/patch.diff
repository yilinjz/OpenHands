```patch
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -41,6 +41,7 @@
 from matplotlib import _api, cbook, _docstring, projections
 from matplotlib.artist import Artist, artist_docstring
 from matplotlib.backend_bases import FigureCanvasBase
+import matplotlib as mpl
 from matplotlib.blocking_input import BlockingInputManager
 from matplotlib.gridspec import GridSpec
 from matplotlib.image import FigureImage
@@ -293,6 +294,59 @@
         self.stale = True
         self._cachedRenderer = None
 
+    def __getstate__(self):
+        state = mpl.artist.Artist.__getstate__(self)
+        # Convert _align_label_groups to a pickleable format based on axes indices.
+        # This is stored in the state dictionary directly, and the original
+        # _align_label_groups attribute is removed.
+        align_groups_pickleable = {'x': [], 'y': []}
+        # Use self.axes list as the reference for indices.
+        all_axes = self.axes
+        axes_map = {ax: i for i, ax in enumerate(all_axes)}
+
+        for group_type, grouper in self._align_label_groups.items():
+            processed_groups = set()
+            # Grouper._mapping maps items to the set containing the item.
+            # We iterate through the keys (axes) in the mapping.
+            for ax in grouper._mapping:
+                if ax not in axes_map:  # Skip axes not in self.axes list.
+                    continue
+                # Find the group this ax belongs to (returns a copy set).
+                group_set = grouper.get_siblings(ax)
+                # Use frozenset for hashability in processed_groups.
+                group_frozenset = frozenset(group_set)
+                if group_frozenset not in processed_groups:
+                    # Convert group members to indices.
+                    group_indices = tuple(sorted(axes_map[member]
+                                                for member in group_frozenset
+                                                if member in axes_map))  # Filter again.
+                    if len(group_indices) > 1:  # Only store non-trivial groups.
+                        align_groups_pickleable[group_type].append(group_indices)
+                    processed_groups.add(group_frozenset)
+
+        state['_align_label_groups_pickleable'] = align_groups_pickleable
+        # Remove the original Grouper dict (which contains Axes objects).
+        state.pop('_align_label_groups', None)
+        return state
+
+    def __setstate__(self, state):
+        # Restore _align_label_groups from pickleable format.
+        align_groups_pickleable = state.pop('_align_label_groups_pickleable')
+
+        # Restore the rest of the state using Artist's setstate.
+        mpl.artist.Artist.__setstate__(self, state)
+
+        # Re-initialize _align_label_groups.
+        self._align_label_groups = {'x': cbook.Grouper(), 'y': cbook.Grouper()}
+
+        # Reconstruct groups using the restored self.axes list.
+        all_axes = self.axes  # Axes should be restored now.
+        axes_by_index = {i: ax for i, ax in enumerate(all_axes)}
+
+        for group_type, groups in align_groups_pickleable.items():
+            for group_indices in groups:
+                axes_to_join = [axes_by_index[i] for i in group_indices if i in axes_by_index]
+                if len(axes_to_join) > 1:
+                    self._align_label_groups[group_type].join(*axes_to_join)
+
     def __repr__(self):
         return "<{clsname} size {w:g}x{h:g} with {n} Axes>".format(
             clsname=self.__class__.__name__,
```
