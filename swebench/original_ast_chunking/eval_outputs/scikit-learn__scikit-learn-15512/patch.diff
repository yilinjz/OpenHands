```patch
--- a/sklearn/cluster/_affinity_propagation.py
+++ b/sklearn/cluster/_affinity_propagation.py
@@ -1,5 +1,6 @@
 """Perform Affinity Propagation Clustering of data"""
 
+import warnings
 import numpy as np
 
 from ..exceptions import ConvergenceWarning
@@ -100,6 +101,7 @@
     n_samples = S.shape[0]
 
     if S.shape[0] != S.shape[1]:
+        # TODO: Use standard sklearn validation checks
         raise ValueError("S must be a square array (shape=%s)" % repr(S.shape))
 
     if preference is None:
@@ -140,6 +142,7 @@
     # Place preference on the diagonal of S
     S.flat[::n_samples + 1] = preference
 
+    converged_ = False  # Flag to check convergence
     for it in range(max_iter):
         # tmp = A + S; compute responsibilities
         np.add(A, S, tmp)
@@ -179,38 +182,40 @@
             se = np.sum(e, axis=1)
             unconverged = (np.sum((se == convergence_iter) + (se == 0))
                            != n_samples)
-            if (not unconverged and (K > 0)) or (it == max_iter):
+            # Check for convergence: stable exemplars and at least one cluster
+            if not unconverged and (K > 0):
+                converged_ = True
                 if verbose:
-                    print("Converged after %d iterations." % it)
+                    print("Converged after %d iterations." % (it + 1))
                 break
-    else:
+
+    n_iter_ = it + 1  # Number of iterations run (it is 0-indexed)
+
+    if not converged_:
         if verbose:
-            print("Did not converge")
+            print(f"Affinity propagation did not converge after {n_iter_} "
+                  f"iterations.")
+        # Return documented values for non-convergence
+        labels = np.full(n_samples, -1, dtype=np.intp)
+        cluster_centers_indices = np.array([], dtype=np.intp)
+        warnings.warn("Affinity propagation did not converge, labels will be"
+                      " -1.", ConvergenceWarning)
+    else:
+        # Algorithm converged. Compute final clusters and centers.
+        I = np.flatnonzero(E)
+        K = I.size  # Identify exemplars
 
-    I = np.flatnonzero(E)
-    K = I.size  # Identify exemplars
+        if K > 0:
+            c = np.argmax(S[:, I], axis=1)
+            c[I] = np.arange(K)  # Identify clusters
+            # Refine the final set of exemplars and clusters and return results
+            for k in range(K):
+                ii = np.where(c == k)[0]
+                j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))
+                I[k] = ii[j]
 
-    if K > 0:
-        c = np.argmax(S[:, I], axis=1)
-        c[I] = np.arange(K)  # Identify clusters
-        # Refine the final set of exemplars and clusters and return results
-        for k in range(K):
-            ii = np.where(c == k)[0]
-            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))
-            I[k] = ii[j]
-
-        c = np.argmax(S[:, I], axis=1)
-        c[I] = np.arange(K)
-        labels = I[c]
-        # Reduce labels to a sorted, gapless, list
-        cluster_centers_indices = np.unique(labels)
-        labels = np.searchsorted(cluster_centers_indices, labels)
-    else:
-        labels = np.array([-1] * n_samples)
-        cluster_centers_indices = np.array([])
+            c = np.argmax(S[:, I], axis=1)
+            c[I] = np.arange(K)
+            labels = I[c]
+            # Reduce labels to a sorted, gapless, list
+            cluster_centers_indices = np.unique(labels)
+            labels = np.searchsorted(cluster_centers_indices, labels)
+        else:
+            # Handle the case of K=0 (no exemplars found) even if converged
+            # This can happen with specific preference settings / data
+            labels = np.full(n_samples, -1, dtype=np.intp)
+            cluster_centers_indices = np.array([], dtype=np.intp)
 
     if return_n_iter:
         return cluster_centers_indices, labels, n_iter_
@@ -288,8 +293,12 @@
                  convergence_iter=self.convergence_iter, damping=self.damping,
                  copy=self.copy, verbose=self.verbose, return_n_iter=True)
 
-        if self.affinity != "precomputed":
+        # If affinity is not precomputed, find cluster centers from X
+        # If affinity is precomputed, cluster centers are indices
+        # If algorithm did not converge, cluster centers are empty
+        if self.affinity != "precomputed" and self.cluster_centers_indices_.size > 0:
             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()
+        elif self.cluster_centers_indices_.size == 0:
+            # Set cluster_centers_ attribute to an empty array with the correct number of features
+            self.cluster_centers_ = np.array([]).reshape(0, X.shape[1])
 
         return self
 
```
