```patch
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1,5 +1,6 @@
 import datetime
 import decimal
+import inspect
 import uuid
 from collections import namedtuple
 from functools import partialmethod, total_ordering
@@ -42,6 +43,11 @@
             del kwargs["max_length"]
         return name, path, args, kwargs
 
+    def get_path(self):
+        if callable(self.path):
+            return self.path()
+        return self.path
+
     def get_prep_value(self, value):
         value = super().get_prep_value(value)
         if value is None:
@@ -51,7 +57,7 @@
 
     def formfield(self, **kwargs):
         return super().formfield(**{
-            'path': self.path,
+            'path': self.get_path(),
             'match': self.match,
             'recursive': self.recursive,
             'form_class': forms.FilePathField,
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1,10 +1,12 @@
 """
 Form fields.
 """
+import inspect
 import io
 import operator
 import os
 import re
+import warnings
 from collections import namedtuple
 from contextlib import suppress
 from datetime import date, datetime, time
@@ -713,8 +715,10 @@
 class FilePathField(ChoiceField):
     def __init__(self, path, *, match=None, recursive=False, allow_files=True,
                  allow_folders=False, **kwargs):
-        self.path, self.match, self.recursive = path, match, recursive
+        resolved_path = path() if callable(path) else path
+        self.path, self.match, self.recursive = resolved_path, match, recursive
         self.allow_files, self.allow_folders = allow_files, allow_folders
+        self.path_repr = path if callable(path) else None
         super().__init__(choices=(), **kwargs)
 
         if self.required:
@@ -733,14 +737,14 @@
                     for f in sorted(files):
                         if self.match is None or self.match_re.search(f):
                             f = os.path.join(root, f)
-                            self.choices.append((f, f.replace(path, "", 1)))
+                            self.choices.append((f, f.replace(self.path, "", 1)))
                 if self.allow_folders:
                     for f in sorted(dirs):
                         if f == '__pycache__':
                             continue
                         if self.match is None or self.match_re.search(f):
                             f = os.path.join(root, f)
-                            self.choices.append((f, f.replace(path, "", 1)))
+                            self.choices.append((f, f.replace(self.path, "", 1)))
         else:
             choices = []
             for f in os.scandir(self.path):
@@ -755,6 +759,16 @@
             self.choices.extend(choices)
 
         self.widget.choices = self.choices
+
+    def __deepcopy__(self, memo):
+        result = super().__deepcopy__(memo)
+        # Restore the uncalled path representation for functions, refs, etc.
+        # This allows the field to be deepcopied prior to the callable being
+        # resolved, eg. when cloning forms or formsets. Deepcopying the
+        # resolved path can be problematic, see #34171.
+        if self.path_repr:
+            result.path = self.path_repr
+        return result
 
 
 class GenericIPAddressField(CharField):
```
