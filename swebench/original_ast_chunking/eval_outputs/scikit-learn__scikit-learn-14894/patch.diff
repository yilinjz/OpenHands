```patch
--- a/sklearn/svm/base.py
+++ b/sklearn/svm/base.py
@@ -311,15 +311,18 @@
         else:  # regression
             n_class = 1
         n_SV = self.support_vectors_.shape[0]
-
-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)
-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,
-                                     dual_coef_indices.size // n_class)
-        self.dual_coef_ = sp.csr_matrix(
-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),
-            (n_class, n_SV))
-
-    def predict(self, X):
+
+        if n_SV == 0:
+            # empty support_vectors_ / dual_coef_
+            # The shape is (n_class, n_SV).
+            self.dual_coef_ = sp.csr_matrix((n_class, 0), dtype=np.float64)
+        else:
+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)
+            # We expect n_class > 0 if n_SV > 0
+            step = n_SV  # step must be n_SV to get shape (n_class, n_SV)
+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1, step)
+            self.dual_coef_ = sp.csr_matrix(
+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),
+                shape=(n_class, n_SV))
+
+    def predict(self, X):
         """Perform regression on samples in X.
 
         For an one-class model, +1 (inlier) or -1 (outlier) is returned.
```
