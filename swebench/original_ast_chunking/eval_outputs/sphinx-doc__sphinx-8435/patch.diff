```patch
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -70,6 +70,25 @@
         return True
 
 
+def _apply_type_aliases(annotation_string: str, aliases: Dict[str, str]) -> str:
+    """Apply type aliases to a type annotation string."""
+    if not annotation_string or not aliases:
+        return annotation_string
+
+    # Sort aliases by length descending to handle overlapping names correctly
+    sorted_aliases = sorted(aliases.items(), key=lambda item: len(item[0]), reverse=True)
+
+    processed_string = annotation_string
+    for name, target in sorted_aliases:
+        # Use word boundaries (\b) to avoid partial matches (e.g., "String" in "MyString")
+        # and handle qualified names correctly.
+        # This regex matches 'name' when it's not preceded or followed by a word character or dot.
+        pattern = r'(?<![\w.])' + re.escape(name) + r'(?![\w.])'
+        processed_string = re.sub(pattern, lambda m: target, processed_string)
+
+    return processed_string
+
+
 # Common base class for all documenters. Public attributes are:
 #
 # - objpath: list of module and attribute names in the order of access
@@ -1053,7 +1072,8 @@
         elif not self.options.annotation:
             self.options.annotation = ""
         else:
-            self.options.annotation = " : " + self.options.annotation
+            annotation = _apply_type_aliases(self.options.annotation, self.config.autodoc_type_aliases)  # NOQA
+            self.options.annotation = " : " + annotation
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         """Decode and return lines of the docstring(s) for the object."""
@@ -1201,7 +1221,8 @@
         elif not self.options.annotation:
             self.options.annotation = ""
         else:
-            self.options.annotation = " : " + self.options.annotation
+            annotation = _apply_type_aliases(self.options.annotation, self.config.autodoc_type_aliases)  # NOQA
+            self.options.annotation = " : " + annotation
 
     def import_object(self, raiseerror: bool = False) -> bool:
         """Import the object given by *self.modname* and *self.objpath* and set
```
