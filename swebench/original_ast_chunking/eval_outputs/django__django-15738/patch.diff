```patch
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -17,6 +17,7 @@
         if delete_field:
             del body[delete_field.name]
             del mapping[delete_field.column]
+            deleted_field_name = delete_field.name
             # Remove any implicit M2M tables
             if (
                 delete_field.many_to_many
@@ -24,28 +25,42 @@
             ):
                 return self.delete_model(delete_field.remote_field.through)
         # Work inside a new app registry
+        else:
+            deleted_field_name = None
         apps = Apps()
 
         # Work out the new value of unique_together, taking renames into
         # account
-        unique_together = [
+        unique_together_raw = model._meta.unique_together
+        if deleted_field_name:
+            unique_together_raw = [
+                ut for ut in unique_together_raw if deleted_field_name not in ut
+            ]
+        unique_together = [
             [rename_mapping.get(n, n) for n in unique]
-            for unique in model._meta.unique_together
+            for unique in unique_together_raw
         ]
 
         # Work out the new value for index_together, taking renames into
         # account
-        index_together = [
+        index_together_raw = model._meta.index_together
+        if deleted_field_name:
+            index_together_raw = [
+                it for it in index_together_raw if deleted_field_name not in it
+            ]
+        index_together = [
             [rename_mapping.get(n, n) for n in index]
-            for index in model._meta.index_together
+            for index in index_together_raw
         ]
 
         indexes = model._meta.indexes
-        if delete_field:
+        if deleted_field_name:
             indexes = [
-                index for index in indexes if delete_field.name not in index.fields
+                index for index in indexes if deleted_field_name not in index.fields
             ]
 
         constraints = list(model._meta.constraints)
+        if deleted_field_name:
+            constraints = [
+                c for c in constraints
+                if not hasattr(c, 'fields') or deleted_field_name not in c.fields
+            ]
 
         # Provide isolated instances of the fields to the new model body so
         # that the existing model's internals aren't interfered with when
```
