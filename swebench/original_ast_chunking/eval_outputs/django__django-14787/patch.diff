```patch
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -36,9 +36,12 @@
         # bound_method has the signature that 'decorator' expects i.e. no
         # 'self' argument, but it's a closure over self so it can call
         # 'func'. Also, wrap method.__get__() in a function because new
-        # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+        # attributes can't be set on bound method objects.
+        # Use method.__get__() to create a bound method object, but then call
+        # it directly rather than storing it, to prevent caching.
+        func = method.__get__(self, type(self))
+        # Don't use partial() to wrap the bound method, assign required
+        # attributes to the wrapper.
+        bound_method = func
         for dec in decorators:
+            # Perform attribute assignments required by functools.wraps().
+            update_wrapper(bound_method, method)
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
 
```
