```patch
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1,10 +1,15 @@
 import datetime
 import re
+import warnings
 from itertools import chain
+from collections import defaultdict, deque
 
 from django.conf import settings
 from django.forms.utils import from_current_timezone, to_current_timezone
 from django.templatetags.static import static
+from django.utils.datastructures import OrderedSet
 from django.utils.dates import MONTHS
 from django.utils.formats import get_format
 from django.utils.html import format_html, html_safe
@@ -15,6 +20,11 @@
 
 MEDIA_TYPES = ('css', 'js')
 
+# Define the warning class for media ordering issues
+class MediaOrderConflictWarning(Warning):
+    pass
+
+
 @html_safe
 class Media:
     def __init__(self, media=None, css=None, js=None):
@@ -29,6 +39,7 @@
                 js = []
         self._css_lists = [css]
         self._js_lists = [js]
+        self._calculated_css = None
+        self._calculated_js = None
 
     def __repr__(self):
         return 'Media(css=%r, js=%r)' % (self._css, self._js)
@@ -39,42 +50,101 @@
     @property
     def _css(self):
         css = self._css_lists[0]
-        # filter(None, ...) avoids calling merge with empty dicts.
-        for obj in filter(None, self._css_lists[1:]):
-            css = {
-                medium: self.merge(css.get(medium, []), obj.get(medium, []))
-                for medium in css.keys() | obj.keys()
-            }
-        return css
+        if self._calculated_css is not None:
+            return self._calculated_css
+
+        merged_css = {}
+        all_mediums = set()
+        # Collect all mediums and filter out None entries
+        valid_css_dicts = [d for d in self._css_lists if d]
+        if not valid_css_dicts:
+            self._calculated_css = {}
+            return {}
+
+        for css_dict in valid_css_dicts:
+            all_mediums.update(css_dict.keys())
+
+        for medium in all_mediums:
+            # Collect all lists for this medium
+            lists_for_medium = [
+                css_dict.get(medium, []) for css_dict in valid_css_dicts if medium in css_dict
+            ]
+            # Filter out empty lists that might result from .get()
+            lists_for_medium = [lst for lst in lists_for_medium if lst]
+            if lists_for_medium:
+                merged_list = self._merge_lists(lists_for_medium)
+                if merged_list:  # Only add medium if list is not empty
+                    merged_css[medium] = merged_list
+        self._calculated_css = merged_css
+        return merged_css
 
     @property
     def _js(self):
-        js = self._js_lists[0]
-        # filter(None, ...) avoids calling merge() with empty lists.
-        for obj in filter(None, self._js_lists[1:]):
-            js = self.merge(js, obj)
-        return js
+        if self._calculated_js is not None:
+            return self._calculated_js
+
+        # Filter out None entries before merging
+        valid_js_lists = [lst for lst in self._js_lists if lst]
+        if not valid_js_lists:
+            self._calculated_js = []
+            return []
+        self._calculated_js = self._merge_lists(valid_js_lists)
+        return self._calculated_js
 
     def render(self):
         return mark_safe('\n'.join(chain.from_iterable(getattr(self, 'render_' + name)() for name in MEDIA_TYPES)))
 
     def render_js(self):
         return [
-            format_html(
-                '<script type="text/javascript" src="{}"></script>',
-                self.absolute_path(path)
-            ) for path in self._js
+            format_html('<script src="{}"></script>', self.absolute_path(path))
+            for path in self._js
         ]
 
     def render_css(self):
         # To keep rendering order consistent, we can't just iterate over items().
         # We need to sort the keys, and iterate over the sorted list.
         media = sorted(self._css)
-        return chain.from_iterable([
-            format_html(
-                '<link href="{}" type="text/css" media="{}" rel="stylesheet">',
-                self.absolute_path(path), medium
-            ) for path in self._css[medium]
-        ] for medium in media)
+        return chain.from_iterable(
+            [format_html(
+                '<link href="{}" media="{}" rel="stylesheet">',
+                self.absolute_path(path), medium,
+            ) for path in self._css[medium]]
+            for medium in media
+        )
 
     def absolute_path(self, path):
         """
@@ -95,45 +165,90 @@
             return Media(**{str(name): getattr(self, '_' + name)})
         raise KeyError('Unknown media type "%s"' % name)
 
-    @staticmethod
-    def merge(list_1, list_2):
+    @staticmethod
+    def _merge_lists(lists):
         """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
-        order.
-
-        For static assets it can be important to have them included in the DOM
-        in a certain order. In JavaScript you may not be able to reference a
-        global or in CSS you might want to override a style.
+        Merge multiple lists into a single list, preserving relative orderings
+        as much as possible using topological sort. Warn if there are ordering
+        conflicts or cycles.
         """
-        # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
+        if not lists:
+            return []
+        # Filter out empty lists and ensure all elements are lists
+        lists = [list(lst) for lst in lists if lst]
+        if not lists:
+            return []
+        if len(lists) == 1:
+            # Remove duplicates while preserving order for a single list
+            return list(OrderedSet(lists[0]))
+
+        # Graph: item -> set of successors (items that must come after)
+        successors = defaultdict(set)
+        # Predecessors: item -> set of predecessors (items that must come before)
+        predecessors = defaultdict(set)
+        # All unique items involved across all lists
+        all_items = OrderedSet()
+        # Items involved in ordering constraints
+        items_in_graph = set()
+
+        # Pass 1: Build the graph and collect all items
+        for lst in lists:
+            all_items.update(lst)
+            for i in range(len(lst) - 1):
+                u, v = lst[i], lst[i+1]
+                if u == v:
+                    continue
+                # Add edge u -> v
+                if v not in successors[u]:
+                    successors[u].add(v)
+                    predecessors[v].add(u)
+                    items_in_graph.add(u)
+                    items_in_graph.add(v)
+                # Check for immediate contradictions (v -> u already exists)
+                if u in successors[v]:
                     warnings.warn(
                         'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
-                        MediaOrderConflictWarning,
+                        '%s\n%s' % (v, u),
+                        MediaOrderConflictWarning, stacklevel=5
                     )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
+
+        # --- Topological Sort (Kahn's algorithm) ---
+        in_degree = {item: len(predecessors[item]) for item in items_in_graph}
+        # Use a deque for the queue
+        queue = deque(sorted([item for item in items_in_graph if in_degree[item] == 0]))
+        sorted_items = []
+
+        while queue:
+            u = queue.popleft()
+            sorted_items.append(u)
+
+            # Use sorted list of successors for deterministic order
+            for v in sorted(list(successors[u])):
+                in_degree[v] -= 1
+                if in_degree[v] == 0:
+                    queue.append(v)
+
+        # Check for cycles
+        if len(sorted_items) < len(items_in_graph):
+            warnings.warn(
+                "Detected an ordering cycle among media files. The order may be incorrect.",
+                MediaOrderConflictWarning, stacklevel=5
+            )
+            # Include items involved in cycles at the end, sorted alphabetically
+            cycled_items = sorted(list(items_in_graph - set(sorted_items)))
+            sorted_items.extend(cycled_items)
+
+        # --- Combine sorted items with unconstrained items ---
+        # Add items not part of the graph, preserving their original relative order
+        # as found in `all_items`.
+        final_list = list(OrderedSet(sorted_items))
+        for item in all_items:
+            if item not in items_in_graph and item not in final_list:
+                final_list.append(item)
+
+        return final_list
 
     def __add__(self, other):
         combined = Media()
-        combined._css_lists = self._css_lists + other._css_lists
-        combined._js_lists = self._js_lists + other._js_lists
+        combined._css_lists.extend(self._css_lists)
+        combined._css_lists.extend(other._css_lists)
+        combined._js_lists.extend(self._js_lists)
+        combined._js_lists.extend(other._js_lists)
         return combined
 
 
```
