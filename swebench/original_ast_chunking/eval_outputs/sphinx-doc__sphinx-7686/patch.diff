```patch
--- a/sphinx/ext/autosummary/generate.py
+++ b/sphinx/ext/autosummary/generate.py
@@ -1,5 +1,6 @@
 """
-sphinx.ext.autosummary.generate - automatically generate documents for modules/classes/exceptions/functions/attributes
+sphinx.ext.autosummary.generate - automatically generate documents for
+modules/classes/exceptions/functions/attributes
 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
@@ -16,6 +17,7 @@
 from sphinx.ext.autodoc import Documenter, ModuleDocumenter
 from sphinx.ext.autodoc.importer import import_module, get_module_members
 from sphinx.ext.autodoc.mock import mock
+from sphinx.ext.autodoc.utils import get_documenter
 from sphinx.ext.autosummary import AutosummaryEntry, get_import_prefixes_from_env
 from sphinx.pycode import ModuleAnalyzer, PycodeError
 from sphinx.util import logging, rst, split_full_qualified_name
@@ -23,7 +25,6 @@
 from sphinx.util.osutil import ensuredir, make_filename
 from sphinx.util.template import SphinxRenderer
 
-from sphinx.ext.autodoc.utils import get_documenter
 
 if False:
     # For type annotation
@@ -102,23 +103,35 @@
                                          obj, False, {})
         except Exception as exc:
             logger.warning(__('autosummary: failed to determine %r to be documented, '
-                              'the following exception was raised:\n%s'),
+                             'the following exception was raised:\n%s'),
                            name, exc, type='autosummary')
             return False
 
     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],
                     imported: bool = True) -> Tuple[List[str], List[str]]:
+        """Get members of object belonging to target types."""
         items = []  # type: List[str]
         public = []  # type: List[str]
         for name in dir(obj):
             try:
                 value = safe_getattr(obj, name)
+                # Check the type of the object and skip if it's not in the target types
                 documenter = get_documenter(app, value, obj)
                 if documenter.objtype in types:
                     # skip imported members if expected
-                    if imported or getattr(value, '__module__', None) == obj.__name__:
-                        skipped = skip_member(value, name, documenter.objtype)
+                    is_imported = getattr(value, '__module__', None) != obj.__name__
+                    if imported or not is_imported:
+                        try:
+                            skipped = skip_member(value, name, documenter.objtype)
+                        except Exception as exc:
+                            # skip_member raises exception. Skip the member.
+                            logger.warning(__('autosummary: failed to determine %r to be documented, '
+                                              'the following exception was raised:\n%s'),
+                                           name, exc, type='autosummary')
+                            skipped = True
+
+                        # Note: skipped might be True, False or None.
                         if skipped is True:
                             pass
                         elif skipped is False:
@@ -131,23 +144,35 @@
                                 # considers member as public
                                 public.append(name)
             except AttributeError:
+                # Some objects like Modules don't allow easy attribute access
                 continue
+            except Exception as exc:
+                # Catch other exceptions during member inspection
+                logger.warning(__('autosummary: failed to inspect member %r of %r, '
+                                  'the following exception was raised:\n%s'),
+                               name, obj, exc, type='autosummary')
         return public, items
 
-    def get_module_attrs(members: Any) -> Tuple[List[str], List[str]]:
+    def get_module_attrs(module_name: str, obj: Any) -> Tuple[List[str], List[str]]:
         """Find module attributes with docstrings."""
         attrs, public = [], []
         try:
-            analyzer = ModuleAnalyzer.for_module(name)
+            analyzer = ModuleAnalyzer.for_module(module_name)
             attr_docs = analyzer.find_attr_docs()
             for namespace, attr_name in attr_docs:
-                if namespace == '' and attr_name in members:
-                    attrs.append(attr_name)
-                    if not attr_name.startswith('_'):
-                        public.append(attr_name)
+                if namespace == '':
+                    try:
+                        value = safe_getattr(obj, attr_name)
+                        # Check skip_member for this attribute
+                        if not skip_member(value, attr_name, 'attribute'):
+                            attrs.append(attr_name)
+                            if not attr_name.startswith('_'):
+                                public.append(attr_name)
+                    except AttributeError:
+                        # Attribute found by analyzer but not present in the object? Skip.
+                        continue
         except PycodeError:
-            pass    # give up if ModuleAnalyzer fails to parse code
+            logger.warning(__('Failed to analyze module attributes in %s'), module_name)
         return public, attrs
 
     def get_modules(obj: Any) -> Tuple[List[str], List[str]]:
@@ -163,21 +188,33 @@
     ns.update(context)
 
     if doc.objtype == 'module':
-        ns['members'] = dir(obj)
+        # Get members specified by type, respecting imported_members
         ns['functions'], ns['all_functions'] = \
             get_members(obj, {'function'}, imported=imported_members)
         ns['classes'], ns['all_classes'] = \
             get_members(obj, {'class'}, imported=imported_members)
         ns['exceptions'], ns['all_exceptions'] = \
             get_members(obj, {'exception'}, imported=imported_members)
+        # Get module attributes, also respecting skip_member
         ns['attributes'], ns['all_attributes'] = \
-            get_module_attrs(ns['members'])
+            get_module_attrs(name, obj)
+
+        # Determine if it's a package
         ispackage = hasattr(obj, '__path__')
         if ispackage and recursive:
+            # Get submodules, recursively (though get_modules isn't recursive itself)
             ns['modules'], ns['all_modules'] = get_modules(obj)
+            # Combine all found members
+            ns['members'] = sorted(list(set(ns['all_functions'] +
+                                            ns['all_classes'] +
+                                            ns['all_exceptions'] +
+                                            ns['all_attributes'] +
+                                            ns['all_modules'])))
         else:
+            ns['modules'] = ns['all_modules'] = []
+            # Combine all found members (excluding modules)
+            ns['members'] = sorted(list(set(ns['all_functions'] +
+                                            ns['all_classes'] +
+                                            ns['all_exceptions'] +
+                                            ns['all_attributes'])))
     elif doc.objtype == 'class':
         ns['members'] = dir(obj)
         ns['inherited_members'] = \
```
