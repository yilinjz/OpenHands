```patch
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -10,8 +10,8 @@
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
-                            ' the available choices.'),
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'
+                            ' available choices.'),
     }
     widget = Select
     iterator = ModelChoiceIterator
@@ -48,13 +48,17 @@
     # ... other methods ...

     def to_python(self, value):
+        original_value = value
         if value in self.empty_values:
             return None
         try:
             key = self.to_field_name or 'pk'
             if isinstance(value, self.queryset.model):
                 value = getattr(value, key)
+            # Keep original value before get() potentially fails or returns an object
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': original_value},
+            )
         return value

     def validate(self, value):
```
