```patch
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -41,18 +41,29 @@
             self.execute(self._create_index_sql(model, fields, suffix="_idx"))
 
     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):
+        """
+        Delete an index/unique constraint for a model defined using
+        index_together/unique_together.
+        """
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
         constraint_names = self._constraint_names(
             model, columns, exclude=meta_constraint_names | meta_index_names,
             **constraint_kwargs
         )
+        # If removing an index and multiple constraints are found,
+        # try to identify the non-unique one. This handles cases where
+        # unique_together and index_together are defined for the same fields.
+        if constraint_kwargs == {'index': True} and len(constraint_names) > 1:
+            unique_constraint_names = self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                unique=True
+            )
+            non_unique_constraint_names = list(set(constraint_names) - set(unique_constraint_names))
+            if len(non_unique_constraint_names) == 1:
+                constraint_names = non_unique_constraint_names
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
-                len(constraint_names),
-                model._meta.db_table,
-                ", ".join(columns),
-            ))
+            # Maybe the constraint doesn't exist? Raise ValueError.
+            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+                len(constraint_names), model._meta.db_table, ", ".join(columns)))
         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))
 
     def alter_db_table(self, model, old_db_table, new_db_table):
```
