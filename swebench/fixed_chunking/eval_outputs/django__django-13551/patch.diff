```patch
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -39,23 +39,34 @@
 
     def _make_hash_value(self, user, timestamp):
         """
-        Hash the user's primary key and some user state that's sure to change
-        after a password reset to produce a token that invalidated when it's
+        Hash the user's primary key and some user state that is sure to change
+        after a password reset or email change to produce a token that is
         used:
-        1. The password field will change upon a password reset (even if the
-           same password is chosen, due to password salting).
-        2. The last_login field will usually be updated very shortly after
-           a password reset.
+
+        1. User's primary key
+        2. User's password hash
+        3. User's last login timestamp
+        4. User's email address
+        5. Current timestamp
+
+        This ensures that the token becomes invalid if the user changes their
+        password, email address, or logs in.
+
         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
         invalidates the token.
-
-        Running this data through salted_hmac() prevents password cracking
-        attempts using the reset token, provided the secret isn't compromised.
         """
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+
+        # Get the email field name for the user model.
+        try:
+            email_field_name = user.get_email_field_name()
+        except AttributeError:
+            # User model doesn't define get_email_field_name().
+            email = ''
+        else:
+            email = getattr(user, email_field_name, '') or ''
+            email = str(email)
+
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())

```
