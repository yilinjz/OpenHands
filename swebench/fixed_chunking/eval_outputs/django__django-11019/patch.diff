```patch
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1,5 +1,6 @@
 """
 HTML Widget classes
 """
+import collections
 import copy
 import datetime
 import json
@@ -26,6 +27,10 @@
 logger = logging.getLogger('django.forms.widgets')
 
 MEDIA_TYPES = ('css', 'js')
+# Increase stacklevel on warnings to show the caller of the Media properties,
+# rather than the internals of the property itself.
+MEDIA_PROPERTY_STACKLEVEL = 3
+MERGE_LISTS_STACKLEVEL = MEDIA_PROPERTY_STACKLEVEL + 1
 
 
 class MediaOrderConflictWarning(RuntimeWarning):
@@ -63,6 +68,73 @@
     def __str__(self):
         return self.render()
 
+    @staticmethod
+    def _merge_lists(lists):
+        """
+        Merge lists of paths, preserving partial orderings and detecting
+        cycles.
+
+        Combine all lists into a single list of lists, filtering empty ones.
+        """
+        all_lists = [lst for lst in lists if lst]
+        if not all_lists:
+            return []
+
+        # 1. Collect all unique items and build initial graph structures.
+        all_items = set()
+        for lst in all_lists:
+            all_items.update(lst)
+
+        # Use OrderedDict for deterministic iteration, avoids sorting later.
+        successors = collections.OrderedDict((item, set()) for item in all_items)
+        in_degree = collections.OrderedDict((item, 0) for item in all_items)
+
+        # 2. Populate graph based on ordering within each list.
+        for lst in all_lists:
+            for i in range(len(lst) - 1):
+                u, v = lst[i], lst[i + 1]
+                # Add edge u -> v if not already present.
+                if u != v and v not in successors[u]:
+                    # Check for immediate cycle (v -> u already exists).
+                    # This detects direct pairwise conflicts early.
+                    if u in successors.get(v, set()):
+                        warnings.warn(
+                            'Detected conflicting ordering constraints for %s '
+                            'and %s.' % (v, u),
+                            MediaOrderConflictWarning,
+                            stacklevel=MERGE_LISTS_STACKLEVEL,
+                        )
+                        # Don't add the edge that creates the immediate cycle.
+                        continue
+                    successors[u].add(v)
+                    in_degree[v] += 1
+
+        # 3. Topological Sort (Kahn's algorithm).
+        # Use a standard list for the queue, items are added in discovery order.
+        queue = collections.deque([item for item in all_items if in_degree[item] == 0])
+        result = []
+
+        while queue:
+            u = queue.popleft()
+            result.append(u)
+
+            # Sort successors to ensure deterministic output for items with no
+            # explicit order relative to each other.
+            for v in sorted(list(successors[u])):
+                in_degree[v] -= 1
+                if in_degree[v] == 0:
+                    queue.append(v)
+
+        # 4. Check for cycles (conflict detection).
+        if len(result) < len(all_items):
+            # Find items involved in cycles (those with in_degree > 0).
+            involved_items = sorted([item for item in all_items if in_degree[item] > 0])
+            warnings.warn(
+                'Detected an ordering cycle among media files: %s. '
+                'Relative order may be unreliable.' % (', '.join(involved_items)),
+                MediaOrderConflictWarning, stacklevel=MERGE_LISTS_STACKLEVEL,
+            )
+            # Append remaining items (involved in cycles) sorted alphabetically
+            # for deterministic, albeit potentially incorrect, order.
+            result.extend(involved_items)
+
+        return result
+
     @property
     def _css(self):
         """
@@ -70,49 +142,25 @@
         """
         # This is computationally intensive, so cache the result.
         if not hasattr(self, '_css_cache'):
-            css = self._css_lists[0]
+            # Collect all media types and paths per media type.
+            media_paths = collections.defaultdict(list)
+            all_media_types = set()
             # filter(None, ...) avoids calling merge with empty dicts.
-            for obj in filter(None, self._css_lists[1:]):
-                css = {
-                    medium: self.merge(css.get(medium, []), obj.get(medium, []))
-                    for medium in css.keys() | obj.keys()
-                }
-            self._css_cache = css
+            for css_dict in filter(None, self._css_lists):
+                all_media_types.update(css_dict.keys())
+                for medium, paths in css_dict.items():
+                    if paths:  # Only add if there are paths.
+                        media_paths[medium].append(paths)
+
+            # Merge paths for each media type.
+            merged_css = {}
+            # Sort media types for consistent output order of <link> tags.
+            for medium in sorted(list(all_media_types)):
+                paths_for_medium = self._merge_lists(media_paths[medium])
+                if paths_for_medium:  # Only include media types with files.
+                    merged_css[medium] = paths_for_medium
+            self._css_cache = merged_css
         return self._css_cache
-
-    @staticmethod
-    def merge(list_1, list_2):
-        """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
-        order.
-
-        For static assets it can be important to have them included in the DOM
-        in a certain order. In JavaScript you may not be able to reference a
-        global or in CSS you might want to override a style.
-        """
-        # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
-                    warnings.warn(
-                        'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
-                        MediaOrderConflictWarning,
-                    )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
 
     @property
     def _js(self):
@@ -121,11 +169,8 @@
         """
         # This is computationally intensive, so cache the result.
         if not hasattr(self, '_js_cache'):
-            js = self._js_lists[0]
             # filter(None, ...) avoids calling merge() with empty lists.
-            for obj in filter(None, self._js_lists[1:]):
-                js = self.merge(js, obj)
-            self._js_cache = js
+            self._js_cache = self._merge_lists(filter(None, self._js_lists))
         return self._js_cache
 
     def render(self):
@@ -171,32 +216,6 @@
             return Media(**{str(name): getattr(self, '_' + name)})
         raise KeyError('Unknown media type "%s"' % name)
 
-    @staticmethod
-    def merge(list_1, list_2):
-        """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
-        order.
-
-        For static assets it can be important to have them included in the DOM
-        in a certain order. In JavaScript you may not be able to reference a
-        global or in CSS you might want to override a style.
-        """
-        # Start with a copy of list_1.
-        combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
-                    warnings.warn(
-                        'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
-                        MediaOrderConflictWarning,
-                    )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
-        return combined_list
-
     def __add__(self, other):
         combined = Media()
         combined._css_lists = self._css_lists + other._css_lists
@@ -213,7 +232,7 @@
         try:
             base = sup_cls.media
         except AttributeError:
-            base = Media()
+            base = Media(css={}, js=[])
 
         # Get the media definition for this class
         definition = getattr(cls, 'Media', None)
```
