```patch
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -17,12 +17,13 @@
 from inspect import Parameter, Signature
 from types import ModuleType
 from typing import (Any, Callable, Dict, Iterator, List, Optional, Sequence, Set, Tuple, Type,
-                    TypeVar, Union, get_type_hints)
+                    TypeVar, Union, cast, get_type_hints)
 
 from docutils.statemachine import StringList
 
 import sphinx
 from sphinx.application import Sphinx
+from sphinx.config import Config
 from sphinx.config import ENUM, Config
 from sphinx.deprecation import RemovedInSphinx40Warning, RemovedInSphinx50Warning
 from sphinx.environment import BuildEnvironment
@@ -30,6 +31,7 @@
 from sphinx.ext.autodoc.mock import mock
 from sphinx.locale import _, __
 from sphinx.pycode import ModuleAnalyzer, PycodeError
+from sphinx.ext.autodoc.typehints import apply_type_aliases
 from sphinx.util import inspect, logging
 from sphinx.util.docstrings import extract_metadata, prepare_docstring
 from sphinx.util.inspect import (evaluate_signature, getdoc, object_description, safe_getattr,
@@ -605,8 +607,10 @@
                 if self.options.annotation is not None and \
                    self.options.annotation is not SUPPRESS:
                     # annotation is stored as string, not in restify form.
-                    annotation = self.options.annotation
-                    self.add_line('   :annotation: %s' % annotation, sourcename)
+                    annotation_str = self.options.annotation
+                    # Apply type aliases replacement here
+                    annotation_str = apply_type_aliases(annotation_str, self.config)
+                    self.add_line('   :annotation: %s' % annotation_str, sourcename)
                 # add module/class options (if any)
                 if self.options.members and self.options.show_inheritance:
                     warnings.warn(__("both :members: and :show-inheritance: option are given "
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -18,8 +18,9 @@
 
 from sphinx import addnodes
 from sphinx.application import Sphinx
+from sphinx.config import Config
 from sphinx.util import inspect, typing
-
+from sphinx.util.typing import restify
 
 def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                      options: Dict, args: str, retann: str) -> None:
@@ -50,3 +51,14 @@
         signature = cast(addnodes.desc_signature, contentnode.parent[0])
         if signature['module']:
             fullname = '.'.join([signature['module'], signature['fullname']])
+
+
+def apply_type_aliases(annotation_str: str, config: Config) -> str:
+    """Apply autodoc_type_aliases to a type hint string."""
+    if not annotation_str:
+        return annotation_str
+
+    aliases = config.autodoc_type_aliases
+    if aliases and annotation_str in aliases:
+        return restify(aliases[annotation_str])
+    return annotation_str
```
