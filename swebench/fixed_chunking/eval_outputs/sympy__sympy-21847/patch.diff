```patch
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -40,31 +40,29 @@
         # Force to list in case of passed tuple or other incompatible collection
         variables = list(variables) + [S.One]
         if all(variable.is_commutative for variable in variables):
-            monomials_list_comm = []
+            generated = set()
             for item in combinations_with_replacement(variables, max_degree):
-                powers = dict()
-                for variable in variables:
-                    powers[variable] = 0
-                for variable in item:
-                    if variable != 1:
-                        powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_comm.append(Mul(*item))
-            yield from set(monomials_list_comm)
+                # Calculate total degree
+                current_degree = sum(1 for v in item if v != S.One)
+                # Check if total degree is within the desired range
+                if current_degree >= min_degree:
+                    monom = Mul(*item)
+                    # Yield unique monomials
+                    if monom not in generated:
+                        yield monom
+                        generated.add(monom)
         else:
-            monomials_list_non_comm = []
+            generated = set()
             for item in product(variables, repeat=max_degree):
-                powers = dict()
-                for variable in variables:
-                    powers[variable] = 0
-                for variable in item:
-                    if variable != 1:
-                        powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_non_comm.append(Mul(*item))
-            yield from set(monomials_list_non_comm)
+                # Calculate total degree
+                current_degree = sum(1 for v in item if v != S.One)
+                # Check if total degree is within the desired range
+                if current_degree >= min_degree:
+                    monom = Mul(*item)
+                    # Yield unique monomials
+                    if monom not in generated:
+                         yield monom
+                         generated.add(monom)
     else:
         # Case where max_degrees and min_degrees are lists (per variable degree)
         if any(i < 0 for i in max_degrees):
```
