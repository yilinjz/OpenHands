2025-05-01 01:38:20,663 - INFO - Creating container for astropy__astropy-7746...
2025-05-01 01:38:20,700 - INFO - Container for astropy__astropy-7746 created: 8251ddb213c4f73065ade5a09870e4c2db28427c06a0eef88a563a4f48013165
2025-05-01 01:38:21,198 - INFO - Container for astropy__astropy-7746 started: 8251ddb213c4f73065ade5a09870e4c2db28427c06a0eef88a563a4f48013165
2025-05-01 01:38:21,198 - INFO - Intermediate patch for astropy__astropy-7746 written to logs/run_evaluation/20250501_013755/swebench-lite_fixed-chunking_BGE-base_gemini-2.5-pro_generations_swebench-lite/astropy__astropy-7746/patch.diff, now applying to container...
2025-05-01 01:38:21,354 - INFO - >>>>> Applied Patch:
Checking patch astropy/wcs/wcs.py...
Hunk #1 succeeded at 1220 (offset -1 lines).
Hunk #2 succeeded at 1246 (offset -1 lines).
Applied patch astropy/wcs/wcs.py cleanly.

2025-05-01 01:38:22,011 - INFO - Git diff before:
diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index d3a06f2b31..21229ace6c 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1220,6 +1220,17 @@ reduce these to 2 dimensions using the naxis kwarg.
 
             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])
 
+            # Handle empty input early: return list of empty arrays matching
+            # the broadcasted input shape.
+            if xy.size == 0:
+                empty_array = np.array([], dtype=np.float64).reshape(axes[0].shape)
+                # If ra_dec_order is requested for output, and WCS is celestial,
+                # return a tuple of two empty arrays.
+                if ra_dec_order and sky == 'output' and self.has_celestial:
+                    return (empty_array, empty_array)
+                # Otherwise, return a list of naxis empty arrays.
+                return [empty_array] * self.naxis
+
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
             output = func(xy, origin)
@@ -1235,6 +1246,11 @@ reduce these to 2 dimensions using the naxis kwarg.
                 raise ValueError(
                     "When providing two arguments, the array must be "
                     "of shape (N, {0})".format(self.naxis))
+
+            # Handle empty input early: return an empty array with shape (0, naxis).
+            if xy.size == 0:
+                return np.zeros((0, self.naxis), dtype=np.float64)
+
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
             result = func(xy, origin)
2025-05-01 01:38:22,011 - INFO - Eval script for astropy__astropy-7746 written to logs/run_evaluation/20250501_013755/swebench-lite_fixed-chunking_BGE-base_gemini-2.5-pro_generations_swebench-lite/astropy__astropy-7746/eval.sh; copying to container...
2025-05-01 01:38:32,370 - INFO - Test runtime: 10.27 seconds
2025-05-01 01:38:32,371 - INFO - Test output for astropy__astropy-7746 written to logs/run_evaluation/20250501_013755/swebench-lite_fixed-chunking_BGE-base_gemini-2.5-pro_generations_swebench-lite/astropy__astropy-7746/test_output.txt
2025-05-01 01:38:32,445 - INFO - Git diff after:
diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index d3a06f2b31..21229ace6c 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1220,6 +1220,17 @@ reduce these to 2 dimensions using the naxis kwarg.
 
             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])
 
+            # Handle empty input early: return list of empty arrays matching
+            # the broadcasted input shape.
+            if xy.size == 0:
+                empty_array = np.array([], dtype=np.float64).reshape(axes[0].shape)
+                # If ra_dec_order is requested for output, and WCS is celestial,
+                # return a tuple of two empty arrays.
+                if ra_dec_order and sky == 'output' and self.has_celestial:
+                    return (empty_array, empty_array)
+                # Otherwise, return a list of naxis empty arrays.
+                return [empty_array] * self.naxis
+
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
             output = func(xy, origin)
@@ -1235,6 +1246,11 @@ reduce these to 2 dimensions using the naxis kwarg.
                 raise ValueError(
                     "When providing two arguments, the array must be "
                     "of shape (N, {0})".format(self.naxis))
+
+            # Handle empty input early: return an empty array with shape (0, naxis).
+            if xy.size == 0:
+                return np.zeros((0, self.naxis), dtype=np.float64)
+
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
             result = func(xy, origin)
2025-05-01 01:38:32,446 - INFO - Grading answer for astropy__astropy-7746...
2025-05-01 01:38:32,448 - INFO - report: {'astropy__astropy-7746': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/wcs/tests/test_wcs.py::test_zero_size_input']}, 'PASS_TO_PASS': {'success': ['astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency', 'astropy/wcs/tests/test_wcs.py::TestMaps::test_maps', 'astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency', 'astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra', 'astropy/wcs/tests/test_wcs.py::test_fixes', 'astropy/wcs/tests/test_wcs.py::test_outside_sky', 'astropy/wcs/tests/test_wcs.py::test_pix2world', 'astropy/wcs/tests/test_wcs.py::test_load_fits_path', 'astropy/wcs/tests/test_wcs.py::test_dict_init', 'astropy/wcs/tests/test_wcs.py::test_extra_kwarg', 'astropy/wcs/tests/test_wcs.py::test_3d_shapes', 'astropy/wcs/tests/test_wcs.py::test_preserve_shape', 'astropy/wcs/tests/test_wcs.py::test_broadcasting', 'astropy/wcs/tests/test_wcs.py::test_shape_mismatch', 'astropy/wcs/tests/test_wcs.py::test_invalid_shape', 'astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords', 'astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception', 'astropy/wcs/tests/test_wcs.py::test_to_header_string', 'astropy/wcs/tests/test_wcs.py::test_to_fits', 'astropy/wcs/tests/test_wcs.py::test_to_header_warning', 'astropy/wcs/tests/test_wcs.py::test_no_comments_in_header', 'astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash', 'astropy/wcs/tests/test_wcs.py::test_validate', 'astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses', 'astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval', 'astropy/wcs/tests/test_wcs.py::test_all_world2pix', 'astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters', 'astropy/wcs/tests/test_wcs.py::test_fixes2', 'astropy/wcs/tests/test_wcs.py::test_unit_normalization', 'astropy/wcs/tests/test_wcs.py::test_footprint_to_file', 'astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs', 'astropy/wcs/tests/test_wcs.py::test_error_message', 'astropy/wcs/tests/test_wcs.py::test_out_of_bounds', 'astropy/wcs/tests/test_wcs.py::test_calc_footprint_1', 'astropy/wcs/tests/test_wcs.py::test_calc_footprint_2', 'astropy/wcs/tests/test_wcs.py::test_calc_footprint_3', 'astropy/wcs/tests/test_wcs.py::test_sip', 'astropy/wcs/tests/test_wcs.py::test_printwcs', 'astropy/wcs/tests/test_wcs.py::test_invalid_spherical', 'astropy/wcs/tests/test_wcs.py::test_no_iteration', 'astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement', 'astropy/wcs/tests/test_wcs.py::test_tpv_copy', 'astropy/wcs/tests/test_wcs.py::test_hst_wcs', 'astropy/wcs/tests/test_wcs.py::test_list_naxis', 'astropy/wcs/tests/test_wcs.py::test_sip_broken', 'astropy/wcs/tests/test_wcs.py::test_no_truncate_crval', 'astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2', 'astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17', 'astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare', 'astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU', 'astropy/wcs/tests/test_wcs.py::test_inconsistent_sip', 'astropy/wcs/tests/test_wcs.py::test_bounds_check', 'astropy/wcs/tests/test_wcs.py::test_naxis', 'astropy/wcs/tests/test_wcs.py::test_sip_with_altkey', 'astropy/wcs/tests/test_wcs.py::test_to_fits_1', 'astropy/wcs/tests/test_wcs.py::test_keyedsip'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7746: resolved: False
2025-05-01 01:38:32,449 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7746.20250501_013755...
2025-05-01 01:38:47,730 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7746.20250501_013755...
2025-05-01 01:38:47,753 - INFO - Container sweb.eval.astropy__astropy-7746.20250501_013755 removed.
