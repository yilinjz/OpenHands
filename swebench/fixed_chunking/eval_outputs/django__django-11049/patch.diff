```patch
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -29,7 +29,8 @@
 class DurationField(Field):
     default_error_messages = {
         'invalid': _('Enter a valid duration.'),
-        'overflow': _('The number of days must be between {min_days} and {max_days}.')
+        'overflow': _('The number of days must be between {min_days} and {max_days}.'),
+        'invalid_format': _('Enter a valid duration. Format: [DD] [[HH:]MM:]ss[.uuuuuu]'),
     }
 
     def prepare_value(self, value):
@@ -45,7 +46,10 @@
         if isinstance(value, datetime.timedelta):
             return value
         try:
-            value = parse_duration(str(value))
+            value = parse_duration(str(value)) # parse_duration raises ValueError on invalid format
+            if value is None:
+                # parse_duration returns None for invalid formats like '1:2:3:4'
+                raise ValueError()
         except OverflowError:
             raise ValidationError(self.error_messages['overflow'].format(
                 min_days=datetime.timedelta.min.days,
@@ -53,3 +57,5 @@
             ), code='overflow')
         except ValueError:
             raise ValidationError(self.error_messages['invalid_format'], code='invalid_format')
+        if value is None:
+            raise ValidationError(self.error_messages['invalid'], code='invalid')
```
