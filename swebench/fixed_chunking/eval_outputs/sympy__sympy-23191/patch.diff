```patch
--- a/sympy/physics/vector/vector.py
+++ b/sympy/physics/vector/vector.py
@@ -17,79 +17,68 @@
 
     def _pretty(self, printer):
         """Pretty Printing method. """
-        from sympy.printing.pretty.stringpict import prettyForm
+        # Delayed import to avoid cyclic imports
+        from sympy.printing.pretty.stringpict import prettyForm, stringPict
+        from sympy.core.add import Add
+        from sympy.core.numbers import S
+
         e = self
+        # Get the arguments (list of tuples (measure_number, basis_vector))
+        ar = e.args
 
-        class Fake:
+        # Handle the zero vector case
+        if len(ar) == 0:
+            # Use printer._print to ensure styles/settings are applied correctly
+            return printer._print(S.Zero)
 
-            def render(self, *args, **kwargs):
-                ar = e.args  # just to shorten things
-                if len(ar) == 0:
-                    return str(0)
-                pforms = []  # output list, to be concatenated to a string
-                for i, v in enumerate(ar):
-                    for j in 0, 1, 2:
-                        # if the coef of the basis vector is 1, we skip the 1
-                        if ar[i][0][j] == 1:
-                            pform = printer._print(ar[i][1].pretty_vecs[j])
-                        # if the coef of the basis vector is -1, we skip the 1
-                        elif ar[i][0][j] == -1:
-                            pform = printer._print(ar[i][1].pretty_vecs[j])
-                            pform = prettyForm(*pform.left(" - "))
-                            bin = prettyForm.NEG
-                            pform = prettyForm(binding=bin, *pform)
-                        elif ar[i][0][j] != 0:
-                            # If the basis vector coeff is not 1 or -1,
-                            # we might wrap it in parentheses, for readability.
-                            pform = printer._print(ar[i][0][j])
+        pforms = []  # List to hold prettyForm objects for each non-zero term
+        for i, v in enumerate(ar): # Iterate through coordinate systems
+            for j in 0, 1, 2: # Iterate through x, y, z components
+                coeff = ar[i][0][j] # The coefficient (measure number)
+                bvec_sym = ar[i][1].pretty_vecs[j] # The basis vector symbol (e.g., i_C)
 
-                            if isinstance(ar[i][0][j], Add):
-                                tmp = pform.parens()
-                                pform = prettyForm(tmp[0], tmp[1])
+                # Skip terms with zero coefficient
+                if coeff == 0:
+                    continue
 
-                            pform = prettyForm(*pform.right(
+                # Get the stringPict representation of the basis vector
+                bvec_pform = printer._print(bvec_sym)
+
+                if coeff == 1:
+                    # Coefficient is 1, term is just the basis vector
+                    pform = bvec_pform
+                    # Set binding for multiplication (it's a positive term)
+                    pform = prettyForm(pform, binding=prettyForm.MUL)
+                elif coeff == -1:
+                    # Coefficient is -1, term is "- bvec"
+                    # Prepend " - " to the basis vector stringPict
+                    pform = bvec_pform.left(" - ")
+                    # Set binding for a negative term
+                    pform = prettyForm(pform, binding=prettyForm.NEG)
+                else:
+                    # General coefficient (non-zero, non +/- 1)
+                    # Get the stringPict representation of the coefficient
+                    coeff_pform = printer._print(coeff)
+
+                    # Wrap the coefficient in parentheses if it's an Add instance
+                    # to ensure correct precedence, e.g., (a+b)*i
+                    if isinstance(coeff, Add):
+                        # stringPict.parens() returns (open_paren, content, close_paren)
+                        # stringPict.next joins them horizontally
+                        coeff_pform = stringPict.next(*coeff_pform.parens())
+
+                    # Combine the coefficient and basis vector stringPicts horizontally
+                    # with a space in between. Use `right` for proper alignment.
+                    pform = coeff_pform.right(" ", bvec_pform)
+
+                    # Determine the binding based on the coefficient's sign
+                    # This helps prettyForm.__add__ place '+' or '-' correctly.
+                    if coeff.is_negative:
+                        binding = prettyForm.NEG
+                    else:
+                        binding = prettyForm.MUL
+
+                    # Create the final prettyForm for this term with the calculated binding
+                    pform = prettyForm(pform, binding=binding)
+
+                pforms.append(pform)
+
+        # If all terms were zero (vector is zero)
+        if not pforms:
+            return printer._print(S.Zero)
+
+        # Join the individual term prettyForms using prettyForm.__add__
+        # This method handles adding " + " or " - " between terms based on binding.
+        final_pform = prettyForm.__add__(*pforms)
+        return final_pform
```
