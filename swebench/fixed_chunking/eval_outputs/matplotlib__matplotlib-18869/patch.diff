```patch
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -1,5 +1,7 @@
 """
 An object-oriented plotting library.
+
+from pathlib import Path
 
 A procedural interface is provided by the companion package
 :mod:`matplotlib.pyplot`.
@@ -11,28 +13,57 @@
   year      = 2007
 }"""
 
+# Need to allow users to override the backend based on environment variable.
+# Must be imported before any other matplotlib imports.
+from . import rcsetup
+from packaging.version import parse as parse_version
+
+# Try to import _version.py, generated by setuptools_scm
+try:
+    from . import _version
+except ImportError:
+    # Could happen if package is not installed or setuptools_scm failed.
+    # Set a default version string, or consider raising an error.
+    class _DummyVersion:
+        version = "0.0.0+unknown"
+    _version = _DummyVersion()
+
+
+_log = rcsetup._log
+
+__version__ = None  # Will be set by __getattr__
+version_info = None # Will be set by __getattr__
+
+def _get_version_string():
+    """Get the version string, caching it in __version__."""
+    global __version__
+    if __version__ is None:
+        import setuptools_scm
+        root = Path(__file__).resolve().parents[2]
+        if (root / ".git").exists() and not (root / ".git/shallow").exists():
+            try:
+                __version__ = setuptools_scm.get_version(
+                    root=root,
+                    version_scheme="post-release",
+                    local_scheme="node-and-date",
+                    fallback_version=_version.version,
+                )
+            except Exception:
+                __version__ = _version.version # Fallback
+        else:  # Get the version from the _version.py setuptools_scm file.
+            __version__ = _version.version
+    return __version__
+
 
 def __getattr__(name):
+    global version_info
     if name == "__version__":
-        import setuptools_scm
-        global __version__  # cache it.
-        # Only shell out to a git subprocess if really needed, and not on a
-        # shallow clone, such as those used by CI, as the latter would trigger
-        # a warning from setuptools_scm.
-        root = Path(__file__).resolve().parents[2]
-        if (root / ".git").exists() and not (root / ".git/shallow").exists():
-            __version__ = setuptools_scm.get_version(
-                root=root,
-                version_scheme="post-release",
-                local_scheme="node-and-date",
-                fallback_version=_version.version,
-            )
-        else:  # Get the version from the _version.py setuptools_scm file.
-            __version__ = _version.version
-        return __version__
+        return _get_version_string()
+    if name == "version_info":
+        if version_info is None:
+            version_str = _get_version_string()
+            parsed_v = parse_version(version_str)
+            version_info = (parsed_v.major, parsed_v.minor, parsed_v.micro)
+        return version_info
     raise AttributeError(f"module {__name__!r} has no attribute {name!r}")
 
 
@@ -40,6 +71,7 @@
 
     # Quickfix to ensure Microsoft Visual C++ redistributable
     # DLLs are loaded before importing kiwisolver
+    import importlib
     from . import ft2font
 
     for modname, minver in [
```
