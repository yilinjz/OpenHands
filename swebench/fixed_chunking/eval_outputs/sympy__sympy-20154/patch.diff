```patch
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -19,22 +19,12 @@
      {2: 1, 4: 1}
      {3: 2}
 
-     Note that the _same_ dictionary object is returned each time.
-     This is for speed:  generating each partition goes quickly,
-     taking constant time, independent of n.
-
      >>> [p for p in partitions(6, k=2)]
-     [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-     If you want to build a list of the returned dictionaries then
-     make a copy of them:
-
-     >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
      [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-     >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+     >>> [p for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
+     >>> [M for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
      [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
-
      References
      ==========
 
@@ -71,9 +61,9 @@
          keys.append(r)
      room = m - q - bool(r)
      if size:
-         yield sum(ms.values()), ms
+         yield sum(ms.values()), ms.copy()
      else:
-         yield ms
+         yield ms.copy()
 
      while keys != [1]:
          # Reuse any 1's.
@@ -117,9 +107,9 @@
              break
          room -= need
          if size:
-             yield sum(ms.values()), ms
+             yield sum(ms.values()), ms.copy()
          else:
-             yield ms
+             yield ms.copy()
 
 
 def ordered_partitions(n, m=None, sort=True):
```
